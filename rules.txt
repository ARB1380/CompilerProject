Program -> Declaration-list
Declaration-list -> Declaration Declaration-list | EPSILON
Declaration -> Declaration-initial Declaration-prime
Declaration-initial -> Type-specifier #p_id ID
Declaration-prime -> Fun-declaration-prime | Var-declaration-prime
Var-declaration-prime -> ; #declare_id | [ #p_num NUM ] #declare_arr ;
Fun-declaration-prime -> ( Params ) Compound-stmt
Type-specifier -> int | void
Params -> int #p_id ID Param-prime Param-list | void
Param-list -> , Param Param-list | EPSILON
Param -> Declaration-initial Param-prime
Param-prime -> [ ] | EPSILON
Compound-stmt -> { Declaration-list Statement-list }
Statement-list -> Statement Statement-list | EPSILON
Statement -> Expression-stmt | Compound-stmt | Selection-stmt | Iteration-stmt | Return-stmt
Expression-stmt -> Expression ; | break ; | ;
Selection-stmt -> if ( Expression ) #save Statement #save_jpf else Statement #jp
Iteration-stmt -> repeat #label Statement until ( Expression ) #until
Return-stmt -> return Return-stmt-prime
Return-stmt-prime -> ; | Expression ;
Expression -> Simple-expression-zegond | #p_id ID B
B -> = Expression #assign | [ Expression ] #test H | Simple-expression-prime
H -> = Expression #assign | G D C
Simple-expression-zegond -> Additive-expression-zegond C
Simple-expression-prime -> Additive-expression-prime C
C -> Relop Additive-expression #cal | EPSILON
Relop -> < #less_than | == #equal
Additive-expression -> Term D
Additive-expression-prime -> Term-prime D
Additive-expression-zegond -> Term-zegond D
D -> Addop Term #cal D | EPSILON
Addop -> + #add | - #sub
Term -> Factor G
Term-prime -> Factor-prime G
Term-zegond -> Factor-zegond G
G -> * #mul Factor #cal G | EPSILON
Factor -> ( Expression ) | #p_id ID Var-call-prime | #p_num NUM
Var-call-prime -> ( Args ) | Var-prime
Var-prime -> [ Expression ] #test | EPSILON
Factor-prime -> ( Args ) #print| EPSILON
Factor-zegond -> ( Expression ) | #p_num NUM
Args -> Arg-list | EPSILON
Arg-list -> Expression Arg-list-prime
Arg-list-prime -> , Expression Arg-list-prime | EPSILON